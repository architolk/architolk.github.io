<script type="text/javascript" charset="UTF-8" src="/assets/js/jsxgraphcore.js"></script>
<script type="text/javascript" charset="UTF-8" src="/assets/js/math.js"></script>

<div id="waveform" class="jxgbox" style="width:100%; height:200px;"></div>
<p/>
<div id="sidebands" class="jxgbox" style="width:100%; height:200px;"></div>
<p/>
<div id="spectrum" class="jxgbox" style="width:100%; height:200px;"></div>

<script language="JavaScript">
  var waveform = JXG.JSXGraph.initBoard('waveform', {boundingbox:[0,2,720,-1.2], axis:true, showCopyright:false});
  var sidebands = JXG.JSXGraph.initBoard('sidebands', {boundingbox: [-10, 1, 10, -1], axis:true, showCopyright:false});
  var spectrum = JXG.JSXGraph.initBoard('spectrum', {boundingbox: [-0.5, 1, 16, -0.1], axis:true, showCopyright:false});

  var si = waveform.create('slider', [[10, 1.8], [190, 1.8], [0, 1, 10]],{suffixLabel:'index:'});
  var smc = waveform.create('slider', [[10, 1.3], [190, 1.3], [0, 1, 10]],{snapWidth:1,suffixLabel:'ratio:'});
  var smf = waveform.create('slider', [[360, 1.3], [540, 1.3], [0, 0, 1]],{suffixLabel:'fine ratio:'});

  function ratio() {
    return smc.Value()+smf.Value();
  }
  function index() {
    return si.Value();
  }

  function wave(x) {
    return Math.sin(x/57.3+index()*Math.sin(ratio()*x/57.3));
  }

  graph = waveform.create('functiongraph', [wave], {strokewidth:2});

  graph.updateDataArray = function() {
    //Forces sidebands and spectrum graph to update
    sidebands.update();
    spectrum.update();
  }

  var bands = sidebands.create('curve', [[0],[0]], {strokeWidth: 4});

  bands.updateDataArray = function() {
    this.dataX = [];
    this.dataY = [];

    var i, y;

    for (i = -10; i < 10; i++) {

      y = besselJ(i,index());
      this.dataX.push(i, i, NaN);
      this.dataY.push(0, y, NaN);
    }

  };


  var harmonics = spectrum.create('curve', [[0],[0]], {strokeWidth: 4});

  harmonics.updateDataArray = function() {
    this.dataX = [];
    this.dataY = [];

    var freqs = {};
    var i, x, y;

    for (i = -10; i < 10; i++) {
      x = 1+i*ratio();
      y = (x<0 ? -1 : 1)*besselJ(i,index());
      if (freqs[abs(x)]) {
        freqs[abs(x)] += y;
      } else {
        freqs[abs(x)] = y;
      }
    }

    for (const freq in freqs) {
      if (freq!=0) {
        this.dataX.push(freq, freq, NaN);
        this.dataY.push(0, abs(freqs[freq]), NaN);
      }
    }
  };

</script>
